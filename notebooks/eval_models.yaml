name: Eval models
description: Evaluate different models on holdout dataset to see which model performs
  the best
inputs:
- {name: feature_data_path, type: String}
- {name: vanilla_model_path}
- {name: tuned_model_path, type: String}
- {name: holdout_days, type: Integer}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn' 'fastparquet' 'fsspec' 'gcsfs' 'google-cloud-storage' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'scikit-learn' 'fastparquet'
      'fsspec' 'gcsfs' 'google-cloud-storage' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def eval_models(feature_data_path, vanilla_model_path, tuned_model_path, holdout_days):\n\
      \    '''Evaluate different models on holdout dataset to see which model performs\
      \ the best'''\n    import json\n    import pandas as pd\n    from io import\
      \ BytesIO\n    from datetime import datetime, timedelta\n    import _pickle\
      \ as cPickle # save ML model\n    from google.cloud import storage # save the\
      \ model to GCS\n    from sklearn.ensemble import RandomForestRegressor\n   \
      \ from sklearn.metrics import mean_absolute_error, mean_squared_error\n    from\
      \ sklearn.model_selection import train_test_split\n    from sklearn.model_selection\
      \ import RandomizedSearchCV\n    from sklearn.model_selection import GridSearchCV\n\
      \    from urllib.parse import urlparse\n    from collections import namedtuple\n\
      \n    # read dataframe\n    sp500_timeboxed_feautres_df = pd.read_parquet(feature_data_path)\n\
      \n    # this will be our training set\n    sp500_holdout_df = sp500_timeboxed_feautres_df[sp500_timeboxed_feautres_df.index\
      \ > (datetime.today() - timedelta(days=holdout_days))]\n\n    # get x and y\n\
      \    x_val, y_val = sp500_holdout_df.drop('Close', axis=1), sp500_holdout_df['Close']\n\
      \n    def get_mae(model_path):\n        '''this function evaluates a model on\
      \ our holdout dataset given just the model path'''\n        parse = urlparse(url=model_path,\
      \ allow_fragments=False)\n\n        if parse.path[0] =='/':\n            model_path\
      \ = parse.path[1:]\n\n        client = storage.Client()\n        bucket = client.get_bucket(parse.netloc)\n\
      \        blob = bucket.get_blob(model_path)\n        if blob is None:\n    \
      \        raise AttributeError('No files to download') \n        model_bytestream\
      \ = BytesIO(blob.download_as_string())\n        model = cPickle.load(model_bytestream)\n\
      \        predictions = model.predict(x_val)\n        return mean_absolute_error(y_val,\
      \ predictions)\n\n    Models = namedtuple('Model', 'type score path')\n    m_list\
      \ = list()\n\n    vanilla_mae = get_mae(vanilla_model_path)\n    m_list.append(Models('vanilla',\
      \ vanilla_mae, vanilla_model_path))\n\n    tuned_mae = get_mae(tuned_model_path)\n\
      \    m_list.append(Models('tuned', tuned_mae, tuned_model_path))\n\n    max_score\
      \ = max([model.score for model in m_list])\n    max_score_index = [model.score\
      \ for model in m_list].index(max_score)\n    print('Best Model: ', m_list[max_score_index])\n\
      \    path = m_list[max_score_index].path\n    return path\n\nimport argparse\n\
      _parser = argparse.ArgumentParser(prog='Eval models', description='Evaluate\
      \ different models on holdout dataset to see which model performs the best')\n\
      _parser.add_argument(\"--feature-data-path\", dest=\"feature_data_path\", type=str,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--vanilla-model-path\"\
      , dest=\"vanilla_model_path\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--tuned-model-path\", dest=\"tuned_model_path\", type=str,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--holdout-days\"\
      , dest=\"holdout_days\", type=int, required=True, default=argparse.SUPPRESS)\n\
      _parsed_args = vars(_parser.parse_args())\n\n_outputs = eval_models(**_parsed_args)\n"
    args:
    - --feature-data-path
    - {inputValue: feature_data_path}
    - --vanilla-model-path
    - {inputValue: vanilla_model_path}
    - --tuned-model-path
    - {inputValue: tuned_model_path}
    - --holdout-days
    - {inputValue: holdout_days}
